#pragma kernel Update

#define SIMULATION_BLOCK_SIZE 32

struct Particle {
	float2 pos;
	float3 color;
};

StructuredBuffer<Particle>	_ParticlesBufferRead;
RWStructuredBuffer<Particle> _ParticlesBufferWrite;

StructuredBuffer  <uint2> _GridIndicesBufferRead;
RWStructuredBuffer<uint2> _GridIndicesBufferWrite;


cbuffer cb{
	int _DispIdx;
	int _NumParticles;

	// ▼ For neighbor search ▼
	float2 _GridDim;
	float _GridH;
	// ▲ For neighbor search ▲
};

// -----------------------------------------------------------------
// ▼ Necessary For Neighbor Search Process ▼
// -----------------------------------------------------------------
float2 GridCalculateCell(float2 pos) {
	return pos / _GridH;
}

uint GridKey(uint2 xy) {
	return xy.x + xy.y * _GridDim.x;
}
// -----------------------------------------------------------------
// ▲ Necessary For Neighbor Search Process ▲
// -----------------------------------------------------------------



// -----------------------------------------------------------------
// !!!!!!!!!!!!!!!!!!!!!!!!!! Own Process !!!!!!!!!!!!!!!!!!!!!!!!!!
// -----------------------------------------------------------------
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void Update(uint3 DTid : SV_DispatchThreadID) {

	uint id = DTid.x;

	_ParticlesBufferWrite[id].color = float3(0, 0, 0);

	uint d = (uint)(_DispIdx > _NumParticles ? 0 : _DispIdx);
	if (id == d) {
		// Neighbor Search Area
		int2 G_XY = (int2)GridCalculateCell(_ParticlesBufferRead[id].pos);	// Calculate Own Cell Position (2D)

		// Loop Around Own Cell
		for (int Y = max(G_XY.y - 1, 0); Y <= min(G_XY.y + 1, _GridDim.y - 1); Y++) {
			for (int X = max(G_XY.x - 1, 0); X <= min(G_XY.x + 1, _GridDim.x - 1); X++) {
				unsigned int G_CELL = GridKey(uint2(X, Y));	// Calculate Neighbor (or own) Cell ID
				if (G_CELL == GridKey(G_XY)) {
					// if own cell, fill red
					uint2 G_START_END = _GridIndicesBufferRead[G_CELL];
					for (unsigned int N_ID = G_START_END.x; N_ID < G_START_END.y; N_ID++) {
						_ParticlesBufferWrite[N_ID].color = float3(1, 0, 0);
					}
				}
				else {
					// if neighbor cell, fill blue
					uint2 G_START_END = _GridIndicesBufferRead[G_CELL];
					for (unsigned int N_ID = G_START_END.x; N_ID < G_START_END.y; N_ID++) {
						_ParticlesBufferWrite[N_ID].color = float3(0, 1, 1);
					}
				}

			}
		}
	}

	_ParticlesBufferWrite[id].pos = _ParticlesBufferRead[id].pos;
}
#pragma kernel Update

#define SIMULATION_BLOCK_SIZE 32

struct Particle {
	float3 pos;
	float3 color;
};

StructuredBuffer<Particle>	_ParticlesBufferRead;
RWStructuredBuffer<Particle> _ParticlesBufferWrite;

StructuredBuffer  <uint2> _GridIndicesBufferRead;
RWStructuredBuffer<uint2> _GridIndicesBufferWrite;


cbuffer cb {
	int _DispIdx;
	int _NumParticles;

	// ▼ For neighbor search ▼
	float3 _GridDim;
	float _GridH;
	// ▲ For neighbor search ▲
};

float3 GridCalculateCell(float3 pos) {
	return pos / _GridH;
}

uint GridKey(uint3 xyz) {
	return xyz.x + xyz.y * _GridDim.x + xyz.z * _GridDim.x * _GridDim.y;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void Update(uint3 DTid : SV_DispatchThreadID) {

	uint id = DTid.x;

	_ParticlesBufferWrite[id].color = float3(0, 0, 0);

	uint d = (uint)(_DispIdx > _NumParticles ? 0 : _DispIdx);
	if (id == d) {
		// Neighbor Search Area
		int3 G_XYZ = (int3)GridCalculateCell(_ParticlesBufferRead[id].pos);	// Calculate Own Cell Position (3D)
		// Loop Around Own Cell
		for (int Z = max(G_XYZ.z - 1, 0); Z <= min(G_XYZ.z + 1, _GridDim.z - 1); Z++) {
			for (int Y = max(G_XYZ.y - 1, 0); Y <= min(G_XYZ.y + 1, _GridDim.y - 1); Y++) {
				for (int X = max(G_XYZ.x - 1, 0); X <= min(G_XYZ.x + 1, _GridDim.x - 1); X++) {
					unsigned int G_CELL = GridKey(uint3(X, Y, Z));	// Calculate Neighbor (or own) Cell ID
					if (G_CELL == GridKey(G_XYZ)) {
						// if own cell, fill red
						uint2 G_START_END = _GridIndicesBufferRead[G_CELL];
						for (unsigned int N_ID = G_START_END.x; N_ID < G_START_END.y; N_ID++) {
							_ParticlesBufferWrite[N_ID].color = float3(1, 0, 0);
						}
					}
					else {
						// if neighbor cell, fill blue
						uint2 G_START_END = _GridIndicesBufferRead[G_CELL];
						for (unsigned int N_ID = G_START_END.x; N_ID < G_START_END.y; N_ID++) {
							_ParticlesBufferWrite[N_ID].color = float3(0, 1, 1);
						}
					}

				}
			}
		}
	}

	_ParticlesBufferWrite[id].pos = _ParticlesBufferRead[id].pos;

}
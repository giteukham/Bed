//////////////////////////////////////
///	DO NOT USE KOREAN IN THIS FILE ///
//////////////////////////////////////


#pragma kernel CountingSort

#include "DigitNumber.hlsl"

#define THREAD_SIZE 256
#define DIGIT_COUNT 10

RWStructuredBuffer<uint> _unsortedBuffer;
RWStructuredBuffer<uint> _sortedBufferByCounting;
RWStructuredBuffer<uint> _testBuffer;

groupshared uint _localCountingBuffer[DIGIT_COUNT];
groupshared uint _localMaxFigureNumber = 0;

int _inputBufferLength;
int _figureNumber;

inline void ResetCountingBuffer()
{
    for (uint i = 0; i < DIGIT_COUNT; i++)
        _localCountingBuffer[i] = 0;
}

void CountingSortByDigit(uint threadId, uint3 gid, uint currentFigureNumber)
{
    // Increase the count of the digit value.
    // If the valueIndex exceeds the inputBufferLength, All zeros are also counted.
    if (threadId < _inputBufferLength)                                                    
    {
        int countIndex = GetDigitPlaceValue(_unsortedBuffer[threadId], currentFigureNumber);
        InterlockedAdd(_localCountingBuffer[countIndex], 1);
    }
    GroupMemoryBarrierWithGroupSync();

    // Inclusive Prefix Sum
    for (uint i = 1; i < DIGIT_COUNT; i++)
        _localCountingBuffer[i] += _localCountingBuffer[i - 1];
    GroupMemoryBarrierWithGroupSync();

    // Sort the unsorted buffer by the digit value.
    if (threadId < _inputBufferLength)
    {
        uint digitValue = GetDigitPlaceValue(_unsortedBuffer[threadId], currentFigureNumber);
        uint sortedIndex;
        
        InterlockedAdd(_localCountingBuffer[digitValue], -1, sortedIndex);
        _sortedBufferByCounting[(sortedIndex - 1) + gid.x * THREAD_SIZE] = _unsortedBuffer[threadId];
    }
    GroupMemoryBarrierWithGroupSync();
}

[numthreads(THREAD_SIZE, 1, 1)]
void CountingSort(uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    const uint threadId = gtid.x + gid.x * THREAD_SIZE;

    const uint figureNumbers = GetFigureNumbers(_unsortedBuffer[threadId]);
    InterlockedMax(_localMaxFigureNumber, figureNumbers);
    GroupMemoryBarrierWithGroupSync();
    
    _testBuffer[threadId] = _localMaxFigureNumber;
    GroupMemoryBarrierWithGroupSync();

    ResetCountingBuffer();
    GroupMemoryBarrierWithGroupSync();
    
    CountingSortByDigit(threadId, gid , 1);
}


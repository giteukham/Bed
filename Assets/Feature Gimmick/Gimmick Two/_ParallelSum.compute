#pragma kernel ParallelSum

#define Thread_Size 256

StructuredBuffer<uint> _numbers;
RWStructuredBuffer<uint> _result;

groupshared int _buffer[Thread_Size];

// SV_GroupThreadID: numthreads(256, 1, 1) -> 256 threads in a group
// SV_DispatchThreadID: numthreads(256, 1, 1) * DispatchSize -> 256 threads in a group * DispatchSize
// SV_GroupID: DispatchSize -> 256 threads in a DispatchSize
// SV_GroupIndex: numthreads.x * numthreads.y * numthreads.z - 1 -> 255 threads in a group
[numthreads(Thread_Size, 1, 1)]
void ParallelSum(uint3 gtid : SV_GroupThreadID, uint3 tid : SV_DispatchThreadID, uint gid : SV_GroupID)
{
	_buffer[gtid.x] = _numbers[tid.x];
	GroupMemoryBarrierWithGroupSync();

	for (uint stride = Thread_Size / 2; stride > 0; stride /= 2)
	{
		if (gtid.x < stride)
		{
			_buffer[gtid.x] += _buffer[gtid.x + stride];
		}
		GroupMemoryBarrierWithGroupSync();
	}

	if (gtid.x == 0)
	{
		_result[gid] = _buffer[0];
	}
}
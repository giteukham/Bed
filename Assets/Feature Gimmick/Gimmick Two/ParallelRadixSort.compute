//////////////////////////////////////
///	DO NOT USE KOREAN IN THIS FILE ///
//////////////////////////////////////

#pragma kernel RadixSort
#pragma kernel LocalMaskScan

#define THREAD_SIZE 256

RWStructuredBuffer<uint> _unsortedBuffer;
RWStructuredBuffer<uint> _localPrefixSumBuffer;
RWStructuredBuffer<uint> _blockSumsBuffer;
RWStructuredBuffer<int> _blockSumsCount;
RWStructuredBuffer<uint> _blockSumsScanBuffer;
RWStructuredBuffer<uint> _sortedBufferByRadix;

RWStructuredBuffer<uint> _testBuffer;

int _blockSumGroupCount;
int _bitShift;
int _lastThreadID;

groupshared uint _localPrefixSum[THREAD_SIZE];

[numthreads(THREAD_SIZE, 1, 1)]
void LocalMaskScan(uint3 tid : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint _unsortedAllCount, _unsortedStride = 0;
	_unsortedBuffer.GetDimensions(_unsortedAllCount, _unsortedStride);

	int element = tid.x < _unsortedAllCount ? _unsortedBuffer[tid.x] : 0;
	uint extractBit = (element >> _bitShift) & 0x3;

	if (tid.x == 0)
	{
		_sortedBufferByRadix[tid.x] = 0;
	}

	if (_unsortedAllCount - THREAD_SIZE * gid.x >= THREAD_SIZE)
	{
		_lastThreadID = THREAD_SIZE - 1;
	}
	else
	{
		_lastThreadID = _unsortedAllCount - THREAD_SIZE * gid.x - 1;
	}
	
	for (int i = 0; i < 4; i++)
	{
		uint mask = extractBit == i;
		_localPrefixSum[gtid.x] = mask;
		GroupMemoryBarrierWithGroupSync();
		
		uint prefixSum = 0;
		for (int offset = 1; offset < THREAD_SIZE; offset <<= 1)
		{
			if (gtid.x >= offset)
			{
				prefixSum = _localPrefixSum[gtid.x] + _localPrefixSum[gtid.x - offset];
			}
			else
			{
				prefixSum = _localPrefixSum[gtid.x];
			}
			_localPrefixSum[gtid.x] = prefixSum;
			GroupMemoryBarrierWithGroupSync();
		}
		
		if (gtid.x < _lastThreadID)
		{
			_localPrefixSum[gtid.x + 1] = _localPrefixSum[gtid.x];
		}
		GroupMemoryBarrierWithGroupSync();
		
		if (gtid.x == 0)
		{
			_localPrefixSum[gtid.x] = 0;
		}
		GroupMemoryBarrierWithGroupSync();
		
		if (tid.x < _unsortedAllCount && mask)
		{
			_localPrefixSumBuffer[tid.x] = _localPrefixSum[gtid.x];
		}
		GroupMemoryBarrierWithGroupSync();
		
		if (gtid.x == _lastThreadID)
		{
			_blockSumsBuffer[_blockSumGroupCount * i + gid.x] = prefixSum;
		}

		_blockSumsCount[0] = _blockSumGroupCount * (i + 1);
		GroupMemoryBarrierWithGroupSync();
	}
	

}

[numthreads(THREAD_SIZE, 1, 1)]
void RadixSort(uint3 tid : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint _unsortedAllCount, _unsortedStride = 0;
	_unsortedBuffer.GetDimensions(_unsortedAllCount, _unsortedStride);
	
	int element = tid.x < _unsortedAllCount ? _unsortedBuffer[tid.x] : 0;
	uint extractBit = (element >> _bitShift) & 0x3;

	if (tid.x < _unsortedAllCount)
	{
		uint prefixSum = _localPrefixSumBuffer[tid.x];
		uint pos = _blockSumsScanBuffer[extractBit * _blockSumGroupCount + gid.x] + prefixSum;

		_sortedBufferByRadix[pos] = element;
	}

	if (_bitShift == 24)
	{
		_testBuffer[tid.x] = _sortedBufferByRadix[tid.x];
	}
}

